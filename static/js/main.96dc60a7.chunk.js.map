{"version":3,"sources":["Person/Person.js","Person/InputPersonDetails/Input.js","App.js","serviceWorker.js","index.js"],"names":["Person","props","className","name","job","onClick","removePerson","bind","this","id","InputDetails","required","onChange","changeNameHandler","placeholder","type","changeJobHandler","addPerson","prevId","App","useState","Persons","state","setState","persons","map","person","key","filter","document","getElementById","value","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSAceA,MAVf,SAAgBC,GACf,OACC,yBAAKC,UAAU,UACd,uCAAaD,EAAME,MACnB,qCAAWF,EAAMG,IAAjB,KACA,4BAAQC,QAAUJ,EAAMK,aAAaC,KAAKC,KAAKP,EAAMQ,IAAKP,UAAU,UAApE,mB,MCwBYQ,MA5Bf,SAAsBT,GAElB,OACI,6BACI,yBAAKC,UAAU,YACX,8BAGA,2BAAOS,UAAU,EAAMC,SAAUX,EAAMY,kBAAmBC,YAAY,YAAYZ,UAAU,QAAQa,KAAK,OAClGN,GAAG,UAGd,yBAAKP,UAAU,YACX,8BAGA,2BAAOS,UAAU,EAAMC,SAAUX,EAAMe,iBAAkBF,YAAY,WAAWZ,UAAU,QAAQa,KAAK,OAAON,GAAG,SAGrH,6BACI,4BAAQJ,QAASJ,EAAMgB,UAAWf,UAAU,UAA5C,iBCnBZgB,EAAS,EA4DEC,MA1Df,WAAgB,IAAD,EACeC,mBAAS,CAC/BC,QAAS,KAFF,mBACJC,EADI,KACGC,EADH,KAMLC,EACF,6BACKF,EAAMD,QAAQI,KAAI,SAACC,GAChB,OAAO,kBAAC,EAAD,CAAQC,IAAOD,EAAOjB,GAAIN,KAAMuB,EAAOvB,KAAMC,IAAKsB,EAAOtB,IAAKK,GAAIiB,EAAOjB,GAAIH,aAAcA,QAgC9G,SAASA,EAAaG,GAAK,IAChBY,EAAWC,EAAXD,QACPE,EAAS,CACLF,QAASA,EAAQO,QAAO,SAACF,GACrB,OAAOA,EAAOjB,KAAOA,OAKjC,OACI,yBAAKP,UAAU,OACX,kBAAC,EAAD,CAAce,UArCtB,WAEI,IAAMd,EAAO0B,SAASC,eAAe,QAC/B1B,EAAMyB,SAASC,eAAe,OACpC,GAAmB,KAAf3B,EAAK4B,OAA8B,KAAd3B,EAAI2B,MAAc,CACvC,IAAItB,EACyB,IAAzBa,EAAMD,QAAQW,OACdvB,EAAK,GAELA,EAAKS,EAAS,EACdA,KANmC,IAShCG,EAAWC,EAAXD,QACPE,EAAS,CACLF,QAAQ,GAAD,mBAAMA,GAAN,CAAe,CAAClB,KAAMA,EAAK4B,MAAO3B,IAAKA,EAAI2B,MAAOtB,GAAIA,OAGjEN,EAAK4B,MAAQ,GACb3B,EAAI2B,MAAQ,OAmBXP,ICjDOS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFX,SAASC,eAAe,SDyHpB,kBAAmBW,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.96dc60a7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Table.css'\r\nimport './InputPersonDetails/Input.css'\r\n\r\nfunction Person(props) {\r\n\treturn (\r\n\t\t<div className=\"person\">\r\n\t\t\t<h3>Hey I'm {props.name}</h3>\r\n\t\t\t<p>I'm  a {props.job} </p>\r\n\t\t\t<button onClick= {props.removePerson.bind(this,props.id)} className=\"button\">Remove Person</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Person;\r\n","import React from \"react\";\r\nimport \"./Input.css\"\r\n\r\n// let nameInput;\r\n\r\nfunction InputDetails(props) {\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"inputBox\">\r\n                <div>\r\n                    {/*<label className=\"label name\" htmlFor=\"name\">Your Name</label>*/}\r\n                </div>\r\n                <input required={true} onChange={props.changeNameHandler} placeholder=\"Your Name\" className=\"input\" type=\"text\"\r\n                       id=\"name\"/>\r\n            </div>\r\n\r\n            <div className=\"inputBox\">\r\n                <div>\r\n                    {/*<label className=\"label job\" htmlFor=\"job\">Your Job</label>*/}\r\n                </div>\r\n                <input required={true} onChange={props.changeJobHandler} placeholder=\"Your Job\" className=\"input\" type=\"text\" id=\"job\"/>\r\n            </div>\r\n\r\n            <div>\r\n                <button onClick={props.addPerson} className=\"button\">Add Person</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default InputDetails;","import React, {useState} from 'react';\n// import logo from './logo.svg';\nimport Person from './Person/Person';\nimport './App.css';\n// import {render} from '@testing-library/react';\nimport InputDetails from \"./Person/InputPersonDetails/Input\";\nlet prevId = 0;\n\nfunction App() {\n    const [state, setState] = useState({\n        Persons: []\n    });\n\n\n    const persons = (\n        <div>\n            {state.Persons.map((person) => {\n                return <Person key = {person.id} name={person.name} job={person.job} id={person.id} removePerson={removePerson}/>;\n            })}\n        </div>\n    );\n////////////////////////////////\n// Function to add persons\n    function addPerson() {\n\n        const name = document.getElementById('name');\n        const job = document.getElementById('job');\n        if (name.value !== '' && job.value !== '') {\n            let id;\n            if (state.Persons.length === 0) {\n                id = 0;\n            } else {\n                id = prevId + 1;\n                prevId++;\n            }\n            debugger;\n            const {Persons} = state;\n            setState({\n                Persons: [...Persons, {name: name.value, job: job.value, id: id}]\n            });\n\n            name.value = '';\n            job.value = '';\n        }\n\n    }\n\n//////////////////////////////////\n// Function to remove persons\n    function removePerson(id) {\n        const {Persons} = state;\n        setState({\n            Persons: Persons.filter((person) => {\n                return person.id !== id;\n            })\n        })\n    }\n\n    return (\n        <div className=\"App\">\n            <InputDetails addPerson={addPerson}/>\n            {persons}\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}